{
  "name": "crypto-lib",
  "version": "0.0.1",
  "main": "crypto-lib.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/whiteout-io/crypto-lib.git"
  },
  "scripts": {
    "pretest": "mkdir -p test/lib/ && cp node_modules/node-forge/js/*.js node_modules/mocha/mocha.css node_modules/mocha/mocha.js node_modules/chai/chai.js node_modules/node-uuid/uuid.js node_modules/underscore/underscore-min.js test/lib",
    "test": "grunt test && mocha test/*-test.js"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {
    "requirejs": "~2.1.6",
    "node-uuid": "~1.4.0",
    "underscore": "~1.4.4",
    "node-forge": "https://github.com/tanx/forge/tarball/my-bundle"
  },
  "devDependencies": {
    "mocha": "~1.10.0",
    "chai": "~1.6.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.5.3",
    "grunt-contrib-connect": "~0.3.0",
    "grunt-mocha": "~0.3.1"
  },
  "readme": "crypto-lib [![Build Status](https://travis-ci.org/whiteout-io/crypto-lib.png?branch=master)](https://travis-ci.org/whiteout-io/crypto-lib)\n==========\n\nA high level crypto module for node.js and the browser. This library exposes a basic high level api, which combines the following low level operations:\n\n* UTF-8 plaintext encoding\n* item-key generation\n* initialization-vector generation\n* AES-CBC item encryption\n* Base64 ciphertext encoding\n* RSA item-key encryption\n* SHA-256 hashing RSA signing of all items\n\n**[Checkout the Demo](http://whiteout-io.github.io/crypto-lib/test/index.html)**\n\n\n## Getting started - Node.js\n\n### Install and Test\n\n\tnpm install https://github.com/whiteout-io/crypto-lib/tarball/master\n\tcd node_modules/crypto-lib/\n\tnpm test\n\n### Example Code\n\n\tvar lib = require('crypto-lib');\n\n\t// generate keypair\n\tlib.rsa.generateKeypair(1024, function(err, keypair) {\n\n\t\tvar publicKey = {\n\t\t\t\t_id: keypair._id,\n\t\t\t\tpublicKey: keypair.pubkeyPem\n\t\t\t},\n\t\t\tprivateKey = {\n\t\t\t\t_id: keypair._id,\n\t\t\t\tprivateKey: keypair.privkeyPem\n\t\t\t};\n\n\t\t// package into batchable envelope for encryption\n\t\tvar envelopes = [{\n\t\t\tid: lib.util.UUID(),\n\t\t\tplaintext: 'Hello, World!',\n\t\t\tkey: lib.util.random(128),\n\t\t\tiv: lib.util.random(128),\n\t\t\treceiverPk: publicKey._id\n\t\t}];\n\n\t\t// encrypt and sign using AES and RSA\n\t\tvar encryptedList = lib.cryptoBatch.encryptListForUser(envelopes, [publicKey], privateKey);\n\n\t\t// decrypt and verify using AES and RSA\n\t\tvar decryptedList = lib.cryptoBatch.decryptListForUser(encryptedList, [publicKey], privateKey);\n\n\t});\n\n\n## Getting started - HTML5:\n\n* To get started, check out the mocha browser tests. There is currently no require.js build for the client yet so you'll have to include the individual scripts by hands.\n* Has been tested to work on iOS, Chrome, Firefox, Safari and Internet Explorer 10.\n* For browsers that don't support window.crypto.getRandomValues(), forge's fortuna algorithm is used to generate pseudo random numbers.\n* The crypto operations should be done inside of a Web Worker thread to not block the main UI thread.\n* [This video](http://www.youtube.com/watch?v=WljJ5guzcLs&feature=share&list=PLBNz3Grrh0qUDwpT0G_1zt9n_uOuan920) also gives some good pointers on how to secure your HTML5 app using Content Security Policy (CSP), sandboxed iframes and CORS in order to protect against XSS and other attacks.\n\n\n## License\n\nlicensed under the [MIT license](http://opensource.org/licenses/MIT):\n\n> Copyright &copy; 2013 Whiteout Networks GmbH.\n>\n> Permission is hereby granted, free of charge, to any person\n> obtaining a copy of this software and associated documentation files\n> (the \"Software\"), to deal in the Software without restriction,\n> including without limitation the rights to use, copy, modify, merge,\n> publish, distribute, sublicense, and/or sell copies of the Software,\n> and to permit persons to whom the Software is furnished to do so,\n> subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be\n> included in all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n> EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n> MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n> NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n> BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n> ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n> CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n> SOFTWARE.\n\nThe Library's uses crypto primitives from [Forge](https://github.com/digitalbazaar/forge) by Digital Bazaar, Inc. which is licensed under [BSD and GPL](https://github.com/digitalbazaar/forge/blob/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "_id": "crypto-lib@0.0.1",
  "description": "crypto-lib [![Build Status](https://travis-ci.org/whiteout-io/crypto-lib.png?branch=master)](https://travis-ci.org/whiteout-io/crypto-lib) ==========",
  "dist": {
    "shasum": "3728aa52aaa7d5ea1b32851e1e850ff21250b04f"
  },
  "_from": "https://github.com/whiteout-io/crypto-lib/tarball/master",
  "_resolved": "https://github.com/whiteout-io/crypto-lib/tarball/master"
}
