{
  "name": "efs",
  "version": "0.1.0",
  "author": {
    "name": "Jeff Kunkle"
  },
  "description": "An fs module stand-in for reading and writing encrypted files",
  "main": "./efs.js",
  "scripts": {
    "test": "mkdir -p temp; vows"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:kunklejr/node-efs.git"
  },
  "keywords": [
    "fs",
    "filesystem",
    "crypto",
    "encrypt",
    "decrypt"
  ],
  "license": "MIT",
  "devDependencies": {
    "vows": "~0.6.3"
  },
  "readme": "# efs\n\nAn fs module stand-in for reading and writing encrypted files\n\n## Installation\n\n    $ npm install efs\n\n## Usage\n\n`efs` attempts to be as similar to `fs` as possible. The one place where\nit differs is in how it needs to be required.\n\n```javascript\nvar efs = require('efs').init('aes-128-cbc', 'password');\n\n// encrypt and write file\nefs.writeFileSync('/tmp/example', 'hello world');\n\n// decrypt and read file\nefs.readFileSync('/tmp/example');\n```\n\n## API\n\nThere's only one API method in `efs` that differs from Node's `fs`\nmodule. Please see [Node's fs docs](http://nodejs.org/api/fs.html)\nfor how to use all the other methods.\n\n### init(algorithm, password)\n\nInitializes the `efs` module with the given encryption algorithm and\nderives the encryption key from the given password.\n\n__Arguments__\n\n* algorithm - the encryption algorithm to use. It is dependent on the\navailable algorithms supported by the version of OpenSSL on the platform.\nExamples are 'aes-128-cbc', 'aes192', etc. On recent releases,\n`openssl list-cipher-algorithms` will display the available ciphers.\n* password - the password used to derive the encryption/decryption key\n\n## Caveats/Exceptions\n\nAlthough most `fs` modules have been implemented in `efs`, there are\nsome exceptions:\n\n* `efs.open` only supports opening a file for writing.\n* `efs.read` and `efs.readSync` is not supported.\n* Writing to arbitrary positions in a file using `efs.write` is not\n  supported.\n* `efs.truncate` and `efs.truncateSync` are not supported.\n* `efs.appendFile` and `efs.appendFileSync` are supported but not\n  terribly efficient. They result in reading and decrypting the entire\n  file and then re-encrypting and writing it back out.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "efs@0.1.0",
  "dist": {
    "shasum": "e2e38e00bc8f0d7508a07d70f105737bd24b0fab"
  },
  "_from": "efs@",
  "_resolved": "https://registry.npmjs.org/efs/-/efs-0.1.0.tgz"
}
